<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sadlil&#39;s on Sadlil&#39;s</title>
    <link>https://sadlil.com/</link>
    <description>Recent content in Sadlil&#39;s on Sadlil&#39;s</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2019 Kazi Sadlil Rhythom</copyright>
    <lastBuildDate>Tue, 05 Nov 2019 10:30:00 +0000</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>The Bucket List</title>
      <link>https://sadlil.com/blog/bucket-list/</link>
      <pubDate>Tue, 05 Nov 2019 10:30:00 +0000</pubDate>
      
      <guid>https://sadlil.com/blog/bucket-list/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;One Bolsover having hung himself from a beam while standing on a pail, or bucket, kicked this vessel away in order to pry
into futurity and it was all UP with him from that moment: Finis.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A list of things that one has not done before but wants to do before dying.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;!-- --&gt;&lt;/th&gt;
&lt;th&gt;&lt;!-- --&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;- &lt;del&gt;Work for Google&lt;/del&gt;&lt;/td&gt;
&lt;td&gt;- Live a week alone (or may be with a few friends) on a remote island&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;- &lt;del&gt;Smoke Amsterdam&amp;rsquo;s weed&lt;/del&gt;&lt;/td&gt;
&lt;td&gt;- Jump from a plane with a parachute&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;- Buy a super car from Tesla&lt;/td&gt;
&lt;td&gt;- Stay a night in a igloo&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;- &lt;del&gt;Be at Eiffel Tower at midnight&lt;/del&gt;&lt;/td&gt;
&lt;td&gt;- Ride a private airplane&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;- Drive a race car in a race&lt;/td&gt;
&lt;td&gt;- Ride a live volcano&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;- &lt;del&gt;Drink Vodka Martini Shaken&lt;/del&gt;&lt;/td&gt;
&lt;td&gt;- &lt;del&gt;Chill on a beach in Bali&lt;/del&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;- Learn to Play the violin&lt;/td&gt;
&lt;td&gt;- &lt;del&gt;Taste Kopi Luwak&lt;/del&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;- &lt;del&gt;See the Coliseum in Rome&lt;/del&gt;&lt;/td&gt;
&lt;td&gt;- &lt;del&gt;Stand in the Sistine Chapel&lt;/del&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;- Visit the Great Pyramid of Giza in Egypt&lt;/td&gt;
&lt;td&gt;- Walk down the Great Wall of China&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;- &lt;del&gt;Go to the Notre Dame Cathedral in Paris&lt;/del&gt;&lt;/td&gt;
&lt;td&gt;- &lt;del&gt;Learn how to swim&lt;/del&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>How Do We Get Rid of a InnoDB Deadlock</title>
      <link>https://sadlil.com/blog/mysql-deadlock/</link>
      <pubDate>Sat, 21 Apr 2018 10:30:00 +0000</pubDate>
      
      <guid>https://sadlil.com/blog/mysql-deadlock/</guid>
      <description>

&lt;p&gt;Read in &lt;a href=&#34;https://medium.com/@sadlil/how-do-we-get-rid-of-a-innodb-deadlock-6829a2114d1a&#34; target=&#34;_blank&#34;&gt;Medium.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Last time i heard the word &lt;strong&gt;deadlock&lt;/strong&gt; i was in college. I read the definition of deadlock in text books. I was so lucky
or who knows may be careful that i didn&amp;rsquo;t encounter deadlock until now.&lt;/p&gt;

&lt;p&gt;So lets go, remember the old days by remembering the definition again -&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A deadlock is a situation where two different programs or processes depend on
one another for completion, either because both are using the same resources or
because of erroneous cues or other problems.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here we go again. The good old days, where we just memorizes stuffs and days goes on.
Lets try to do some better understanding, by writing a few lines in code languages that we all understands better.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;var&lt;/span&gt; m1, m2 sync.Mutex

&lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;main&lt;/span&gt;() {
	&lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;var&lt;/span&gt; wg sync.WaitGroup

	wg.&lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;Add&lt;/span&gt;(&lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;1&lt;/span&gt;)
	&lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;func&lt;/span&gt;() {
		&lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;defer&lt;/span&gt; wg.&lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;Done&lt;/span&gt;()

		m1.&lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;Lock&lt;/span&gt;()
		time.&lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;Sleep&lt;/span&gt;(time.Second &lt;span style=&#34;color:#333&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;2&lt;/span&gt;)
		m2.&lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;Lock&lt;/span&gt;()
	}()

	wg.&lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;Add&lt;/span&gt;(&lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;1&lt;/span&gt;)
	&lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;func&lt;/span&gt;() {
		&lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;defer&lt;/span&gt; wg.&lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;Done&lt;/span&gt;()

		m2.&lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;Lock&lt;/span&gt;()
		time.&lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;Sleep&lt;/span&gt;(time.Second &lt;span style=&#34;color:#333&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;3&lt;/span&gt;)
		m1.&lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;Lock&lt;/span&gt;()
	}()

	wg.&lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;Wait&lt;/span&gt;()
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&#34;https://play.golang.org/p/HZzEQiebUdR&#34; target=&#34;_blank&#34;&gt;See in Playground&lt;/a&gt;. Boom here we go, &lt;strong&gt;Deadlock&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So where did i got deadlock after so long years, in some plain simple MySql upsert.&lt;/p&gt;

&lt;p&gt;I recently joined &lt;a href=&#34;https://grab.com&#34; target=&#34;_blank&#34;&gt;Grab&lt;/a&gt;.
In grab we work with lots of unicorns. I mean literally huge lot of unicorns. Those unicorns are very keen to do hard work
by collecting their favorite foods &lt;strong&gt;flora&lt;/strong&gt;. They are also very keen to know their work log. When and How they did with their
work, If something went missing they become so much angry. So we had to be very careful storing and manipulating those data.&lt;/p&gt;

&lt;p&gt;As the number of unicorns are so high, we tries to store those floras by triggering some job time to time.
They are as frequent as possible and those jobs are doing a lot of Batch Upsert in MySql. We were trying to increase our job, to
serves those unicorns better. And suddenly we are getting Deadlocks from MySql. As we were already careful,
and &lt;strong&gt;doing retry on our failed queries&lt;/strong&gt;, we find ourselves safe. But our engineering mind wanted to know the reason.
We wanted to know what we could do better to avoid those flunky deadlocks.&lt;/p&gt;

&lt;h3 id=&#34;innodb-deadlock&#34;&gt;InnoDB Deadlock&lt;/h3&gt;

&lt;p&gt;We went on the goose chase and found out that  &amp;ndash; it is possible to cause deadlocks in Innodb
on concurrent &lt;code&gt;insert&lt;/code&gt; or &lt;code&gt;insert ... on duplicate key update&lt;/code&gt; statements,
without there being any transactions in progress. Deadlocks are possible even when the inserts don&amp;rsquo;t collide on any key.
The reason for getting deadlocks is &lt;strong&gt;Gap Locking&lt;/strong&gt;. There are several reasons for &lt;a href=&#34;https://dev.mysql.com/doc/refman/5.6/en/innodb-locking.html#innodb-gap-locks&#34; target=&#34;_blank&#34;&gt;Gap locking&lt;/a&gt;,
the most common one is mysql has to deal with preserving a unique key constraint on an index.&lt;/p&gt;

&lt;p&gt;The situation presents itself to us this way:
There is a unique key constraint on a column and we are doing an insert. Mysql has to make sure that
the lock it takes is sufficient to prevent another concurrent insert from adding a record with the same key.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://thushw.blogspot.sg/2010/11/mysql-deadlocks-with-concurrent-inserts.html&#34; target=&#34;_blank&#34;&gt;This post&lt;/a&gt; did a fabulous job explaining the
gap lock to me by the following way -
If we want to illustrate the deadlock due to gap lock with some simple query, let us start with a table schema:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-mysql&#34; data-lang=&#34;mysql&#34;&gt;&lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;TABLE&lt;/span&gt; &lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;unicorns&lt;/span&gt; (
   id &lt;span style=&#34;color:#339;font-weight:bold&#34;&gt;bigint&lt;/span&gt;(&lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#036;font-weight:bold&#34;&gt;NULL&lt;/span&gt; &lt;span style=&#34;color:#038;font-weight:bold&#34;&gt;auto_increment&lt;/span&gt;,
   name &lt;span style=&#34;color:#339;font-weight:bold&#34;&gt;varchar&lt;/span&gt;(&lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;255&lt;/span&gt;) &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#036;font-weight:bold&#34;&gt;NULL&lt;/span&gt;,
   &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;PRIMARY&lt;/span&gt; &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;KEY&lt;/span&gt; (id),
   &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;UNIQUE&lt;/span&gt; &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;KEY&lt;/span&gt; &lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;key_name&lt;/span&gt; (name)
) &lt;span style=&#34;color:#038;font-weight:bold&#34;&gt;ENGINE&lt;/span&gt;&lt;span style=&#34;color:#333&#34;&gt;=&lt;/span&gt;InnoDB&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let us assume the following rows already exists in the &lt;code&gt;unicorns&lt;/code&gt; table, and lets look at them at the order of
name index.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;  | id | name |
  |&lt;span style=&#34;color:#333&#34;&gt;----&lt;/span&gt;|&lt;span style=&#34;color:#333&#34;&gt;------&lt;/span&gt;|
  | &lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;11&lt;/span&gt; | ggg  |
  | &lt;span style=&#34;color:#40e;font-weight:bold&#34;&gt;04&lt;/span&gt; | jjj  |&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, lets &lt;strong&gt;imagine&lt;/strong&gt; &lt;strong&gt;two concurrent connections&lt;/strong&gt; executing the following inserts simultaneously in the following order:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Connection 1&lt;/strong&gt;:&lt;br&gt;
&lt;code&gt;insert ignore into unicorns values(null, &amp;quot;ppp&amp;quot;);&lt;/code&gt;
For this insert to proceed, connection 1 will lock the gap between &lt;code&gt;&amp;quot;jjj&amp;quot;&lt;/code&gt; and &lt;code&gt;&amp;quot;ppp&amp;quot;&lt;/code&gt; in the name index.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Connection 2&lt;/strong&gt;:&lt;br&gt;
&lt;code&gt;insert ignore into unicorns values (null,&amp;quot;iii&amp;quot;);&lt;/code&gt;
This will require locking the gap after &lt;code&gt;&amp;quot;ggg&amp;quot;&lt;/code&gt;, upto &lt;code&gt;&amp;quot;iii&amp;quot;&lt;/code&gt;. Since the lock from connection 1 does not span this,
it will take the lock.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;insert ignore into unicorns values (null, &amp;quot;mmm&amp;quot;);&lt;/code&gt;
This needs to lock the gap after &lt;code&gt;&amp;quot;jjj&amp;quot;&lt;/code&gt; upto &lt;code&gt;&amp;quot;mmm&amp;quot;&lt;/code&gt;. Since &lt;strong&gt;connection 1&lt;/strong&gt; has a lock between &lt;code&gt;&amp;quot;jjj&amp;quot;&lt;/code&gt; and &lt;code&gt;&amp;quot;ppp&amp;quot;&lt;/code&gt;,
effectively spanning the lock &lt;strong&gt;connection 2&lt;/strong&gt; is attempting to take, this will block.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Connection 1&lt;/strong&gt;:&lt;br&gt;
&lt;code&gt;insert ignore into unicorns values (null, &amp;quot;hhh&amp;quot;);&lt;/code&gt;
This again requires the gap lock between &lt;code&gt;&amp;quot;ggg&amp;quot;&lt;/code&gt; and &lt;code&gt;&amp;quot;hhh&amp;quot;&lt;/code&gt;. This will block as it spans the the
lock &lt;code&gt;[&amp;quot;ggg&amp;quot; to &amp;quot;iii&amp;quot;]&lt;/code&gt; held by &lt;strong&gt;connection 2&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Thus we have both connections blocked on each other. This is the 💥 💥 💥 &lt;strong&gt;deadlock&lt;/strong&gt; 💥 💥 💥.&lt;/p&gt;

&lt;p&gt;At this state running &lt;code&gt;SHOW ENGINE INNODB STATUS&lt;/code&gt; will show the recent deadlock with exact parameters and locking information
that will help to debug and understand the issue more robustly.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Going forward we discovered this bug report in mysql &lt;a href=&#34;https://bugs.mysql.com/bug.php?id=52020&#34; target=&#34;_blank&#34;&gt;https://bugs.mysql.com/bug.php?id=52020&lt;/a&gt;, and eventually we found this
in mysql change logs in mysql versions &lt;code&gt;5.6.4, 5.1.61, and 5.5.20&lt;/code&gt; that stats -&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;  Issuing INSERT...ON DUPLICATE KEY statements for InnoDB tables from concurrent threads
  could cause a deadlock, particularly with the INSERT...ON DUPLICATE KEY UPDATE form.
  The problem could also be triggered by issuing multiple INSERT IGNORE statements. The
  fix avoids deadlocks caused by the same row being accessed by more than one transaction.
  Deadlocks could still occur when multiple rows are inserted and updated simultaneously
  by different connection in inconsistent order; those types of deadlocks require the
  standard error handling on the application side, of re-trying the transaction.
  (Bug #11759688, Bug #52020, Bug #12842206)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And So we are doomed. So the solution is on application side. Now we need to find out all possible improvements that
we could do in our application side, hence enhancing our engineering capabilities. Lets go find out the solutions.&lt;/p&gt;

&lt;h3 id=&#34;available-solutions&#34;&gt;Available Solutions:&lt;/h3&gt;

&lt;h4 id=&#34;retry&#34;&gt;Retry&lt;/h4&gt;

&lt;p&gt;The most simplest solution is to retry with some delay for the failed query. In case of a Deadlock like in our example
 connection 1 will get errored, but connection 2 will success afterwards. So retrying the connection 1 query will success eventually.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We are already doing retry, as we were careful. So We got saved in this case.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;shard-and-or-normalize-the-table&#34;&gt;Shard and/or Normalize the table:&lt;/h4&gt;

&lt;p&gt;If we could shard or normalize our unicorn table into multiple database or tables in a way that the gap locking on insert
 could potentially be minimize eventually the occurrence of deadlocks would be decreased.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Normalization is not an option for us. First of all we care most about not to do joins on the quires.
 With respect to the size of unicorns table its too costly.
 Shard we can do that. But that&amp;rsquo;s like a long term solution. We can&amp;rsquo;t do immediate sharding at this moment
 and still support the previous data. But eventually we can do that in the future. And if we are going to
 start other tables we should obviously keep that in mind.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;chose-your-index-carefully&#34;&gt;Chose your index carefully&lt;/h4&gt;

&lt;p&gt;If you are using index based on multiple keys you should chose those columns and index order carefully.
 The columns that varies frequently, please use that as less possible, or as the last in the order index.
 ie &lt;code&gt;UNIQUE KEY key_name (name, updated_at)&lt;/code&gt; is much better index than &lt;code&gt;UNIQUE KEY key_name (updated_at, name)&lt;/code&gt;
 and reduces the chance of deadlock.&lt;/p&gt;

&lt;h4 id=&#34;reduce-batch-size&#34;&gt;Reduce Batch Size&lt;/h4&gt;

&lt;p&gt;Keep the batch size small and short. So it will took less time execute and hence make them less prone to collision.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If we reduce our batch size the deadlock may occur less, But it will increase our query count.
 And we had to make peace with the time that increased due to increased query count. Now which one is better?
 Increased time due to retry after deadlock or More query to run? We need to find a sweet spot that we can live
 peacefully with.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;order-query&#34;&gt;Order Query&lt;/h4&gt;

&lt;p&gt;Ordering the indexed values in query for every connection reduces the probabilities of higher gap locks. In our example table
 above, we could actually avoid the deadlock by inserting the values in the order of &lt;code&gt;name&lt;/code&gt; index.&lt;/p&gt;

&lt;p&gt;Let me explain in a bit more details for this as i have a comment to elaborate this phrase. If we go back to our example with unicorns table and the queries with two connection we saw that queries in the following order&lt;br&gt;
 1. Connection 1 to insert &amp;ldquo;ppp&amp;rdquo; and requiring gap lock between &amp;ldquo;jjj&amp;rdquo; to &amp;ldquo;ppp&amp;rdquo;;&lt;br&gt;
 2. Connection 2 to insert &amp;ldquo;iii&amp;rdquo; and requiring gap lock between &amp;ldquo;ggg&amp;rdquo; to &amp;ldquo;iii&amp;rdquo;;
 and trying to insert &amp;ldquo;mmm&amp;rdquo; and this requires lock after &amp;ldquo;jjj&amp;rdquo; upto &amp;ldquo;mmm&amp;rdquo;.&lt;br&gt;
 3. Connection 1 to insert &amp;ldquo;hhh&amp;rdquo; and that required gap lock between &amp;ldquo;ggg&amp;rdquo; and &amp;ldquo;hhh&amp;rdquo;;&lt;br&gt;
 But this is already held by connection 2. And connection 2 can not complete its query because it is waiting on connection 1 to release the lock for &amp;ldquo;ppp&amp;rdquo;. And gets the dead lock.
 But if we insert those quires in order of &amp;ldquo;name&amp;rdquo; that is actually our index, and tries to executes those sorted queries  - as connection 1 tries to insert &amp;ldquo;hhh&amp;rdquo; first before trying to insert &amp;ldquo;ppp&amp;rdquo; -  this reduces chances of deadlock by reducing chances for minimised gap locks.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Now that&amp;rsquo;s what we can defiantly do. Sorting increases the full process execution time a bit, but with
 some good sorting algorithms available that is not that much.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;convert-insert-on-duplicate-key-update-into-select-then-insert-or-update&#34;&gt;Convert &lt;code&gt;INSERT ON DUPLICATE KEY UPDATE&lt;/code&gt; into &lt;code&gt;SELECT then INSERT or UPDATE&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Converting the &lt;code&gt;INSERT ON DUPLICATE KEY UPDATE&lt;/code&gt; query into a &lt;code&gt;SELECT then INSERT or UPDATE&lt;/code&gt; can help to lower down
 deadlocks.&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;use-mysiam-storage-engine&#34;&gt;Use MySIAM storage engine&lt;/h4&gt;

&lt;p&gt;There is another option to avoid deadlock to use a different engine entirely. MySIAM Engine has a mechanism
 to avoid a deadlock scenario. Instead of row level locking MySIAM uses full table level locking. And I
 MySIAM does not implement any transaction.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We are not inserted to switch over to another new storage engine. Probably you too.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;solution&#34;&gt;Solution:&lt;/h3&gt;

&lt;p&gt;After our findings we decided to go with two immediate approach for our unicorn table.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We are already retrying and will continue doing this,&lt;/li&gt;
&lt;li&gt;Reduce batch size for query,&lt;/li&gt;
&lt;li&gt;Order by index columns before query&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That gave us significant improvement on the situation. May be in future we will also try to shard
  our unicorns tables, we kept the options open.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Willing to work with challenges like this? Grab is Hiring. Check out &lt;a href=&#34;https://grab.careers/team-engineering/?tm=Engineering&#34; target=&#34;_blank&#34;&gt;grab.carrers&lt;/a&gt;.
Or drop me an email.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;references&#34;&gt;References:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;MySql Bug - &lt;a href=&#34;https://bugs.mysql.com/bug.php?id=52020&#34; target=&#34;_blank&#34;&gt;https://bugs.mysql.com/bug.php?id=52020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;InnoDB Deadlock - &lt;a href=&#34;https://dev.mysql.com/doc/refman/5.6/en/innodb-locking.html#innodb-gap-locks&#34; target=&#34;_blank&#34;&gt;https://dev.mysql.com/doc/refman/5.6/en/innodb-locking.html#innodb-gap-locks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MySql InnoDB Deadlock - &lt;a href=&#34;http://thushw.blogspot.sg/2010/11/mysql-deadlocks-with-concurrent-inserts.html&#34; target=&#34;_blank&#34;&gt;http://thushw.blogspot.sg/2010/11/mysql-deadlocks-with-concurrent-inserts.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MySql Forum suggestion to avoid deadlock - &lt;a href=&#34;https://forums.mysql.com/read.php?22,386646,386998#msg-386998&#34; target=&#34;_blank&#34;&gt;https://forums.mysql.com/read.php?22,386646,386998#msg-386998&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;InnoDB Deadlock example &lt;a href=&#34;https://dev.mysql.com/doc/refman/5.7/en/innodb-deadlock-example.html&#34; target=&#34;_blank&#34;&gt;https://dev.mysql.com/doc/refman/5.7/en/innodb-deadlock-example.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Prevent Deadlock - &lt;a href=&#34;https://www.xaprb.com/blog/2006/08/03/a-little-known-way-to-cause-a-database-deadlock/&#34; target=&#34;_blank&#34;&gt;https://www.xaprb.com/blog/2006/08/03/a-little-known-way-to-cause-a-database-deadlock/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MySql Doc to avoid deadlocks - &lt;a href=&#34;https://dev.mysql.com/doc/refman/5.6/en/innodb-deadlocks-handling.html&#34; target=&#34;_blank&#34;&gt;https://dev.mysql.com/doc/refman/5.6/en/innodb-deadlocks-handling.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MySIAM storage Engine - &lt;a href=&#34;https://dev.mysql.com/doc/refman/5.7/en/myisam-storage-engine.html&#34; target=&#34;_blank&#34;&gt;https://dev.mysql.com/doc/refman/5.7/en/myisam-storage-engine.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>AutoBill</title>
      <link>https://sadlil.com/project/autobill/</link>
      <pubDate>Tue, 07 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://sadlil.com/project/autobill/</guid>
      <description>&lt;div class=&#34;row&#34;&gt;
&lt;div class=&#34;col-xs-12 col-md-7&#34;&gt;
&lt;b&gt;Built At: &lt;a href=http://www.bitmascot.com/&gt;Bit Mascot Pvt. LTD&lt;/a&gt;&lt;/b&gt;&lt;br&gt;
    &lt;div class=&#34;skills-tech-project&#34;&gt;
      &lt;b&gt;Built With: &lt;/b&gt;
      &lt;span&gt;Groovy&lt;/span&gt;
      &lt;span&gt;Grails&lt;/span&gt;
      &lt;span&gt;MySQL&lt;/span&gt;
      &lt;span&gt;Javascript&lt;/span&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;col-xs-12 col-md-5&#34;&gt;
    &lt;a href=&#34;http://www.autobill.com/&#34; target=&#34;_blank&#34;&gt;
        &lt;i class=&#34;fa fa-external-link-square big-icon&#34;&gt;&lt;/i&gt;
    &lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
An automated billing software to manage clients Billing. Manages automated
invoice and Recurring Billing. AutoBill delivers extended functionality enabling
any business, organisation or association to engage in online customer
interaction much more efficiently. With a rich feature set including self-service
customer portal, electronic invoicing and one-click pay now features, AutoBill
makes it quick and easy for customers to pay – ensuring regular cash flow that is the
lifeblood of any business.&lt;br&gt;&lt;/p&gt;

&lt;p&gt;In addition, with the demand for complex recurring billing and automatic payment
processes greater than ever before, AutoBill delivers powerful features to do
all the heavy lifting for you. With AutoBill, spend more time selling and less
time processing invoices and payments.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Roles and Responsibilities:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Design and Implement various Client required Features&lt;/li&gt;
&lt;li&gt;Fix BUGS&lt;/li&gt;
&lt;li&gt;Work and update jquery based custom UI frameworks&lt;/li&gt;
&lt;li&gt;Implement Business logic for various operations&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>WebCommander</title>
      <link>https://sadlil.com/project/webcommander/</link>
      <pubDate>Tue, 07 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://sadlil.com/project/webcommander/</guid>
      <description>&lt;div class=&#34;row&#34;&gt;
&lt;div class=&#34;col-xs-12 col-md-7&#34;&gt;
&lt;b&gt;Built At: &lt;a href=http://www.bitmascot.com/&gt;Bit Mascot Pvt. LTD&lt;/a&gt;&lt;/b&gt;&lt;br&gt;
    &lt;div class=&#34;skills-tech-project&#34;&gt;
      &lt;b&gt;Built With: &lt;/b&gt;
      &lt;span&gt;Groovy&lt;/span&gt;
      &lt;span&gt;Grails&lt;/span&gt;
      &lt;span&gt;MySQL&lt;/span&gt;
      &lt;span&gt;Javascript&lt;/span&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;col-xs-12 col-md-5&#34;&gt;
    &lt;a href=&#34;http://www.webcommander.com/&#34; target=&#34;_blank&#34;&gt;
        &lt;i class=&#34;fa fa-external-link-square big-icon&#34;&gt;&lt;/i&gt;
    &lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
WebCommander has everything you need to deploy and run a successful online store. Much more than an eCommerce CMS, WebCommander includes Drag &amp;amp; Drop store design, beautiful templates, powerful eCommerce tools, built in SEO, a blog, comprehensive statistical &amp;amp; administration tools, mCommerce, social networking integration, discounts, coupons, wishlists and much more. WebCommander gives you the power and freedom needed to create and manage an online store successfully.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Roles and Responsibilities:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Design and Implement various Client required Features&lt;/li&gt;
&lt;li&gt;Fix BUGS&lt;/li&gt;
&lt;li&gt;Work and update jquery based custom UI frameworks&lt;/li&gt;
&lt;li&gt;Implement Business logic for various operations&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>False Alarm Detection in Wireless Body Sensor Network using Adaptive and Intelligent Approach</title>
      <link>https://sadlil.com/publication/false-alarm/</link>
      <pubDate>Sat, 10 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://sadlil.com/publication/false-alarm/</guid>
      <description></description>
    </item>
    
    <item>
      <title>প্রাইম - বিট সিভ</title>
      <link>https://sadlil.com/blog/prime-bit-seive-bangla/</link>
      <pubDate>Mon, 03 Feb 2014 11:00:00 +0000</pubDate>
      
      <guid>https://sadlil.com/blog/prime-bit-seive-bangla/</guid>
      <description>&lt;p&gt;এক ছোট ভাই পোষ্ট দিল যে ১০০০০০০০০০ এর বড় প্রাইম নাম্বার গুলা কিভাবে বের করা যায়। তার জবাবে এই টিউটোরিয়াল টা লেখা । বড়দের জন্য নয়।&lt;/p&gt;

&lt;p&gt;১০০০০০০০০০ প্ররযন্ত প্রাইম নাম্বার আমরা সিভ নামক একটা Algorithm ব্যবহার করে খুব সহজে বের করে ফেলতে পারি। তাই না। sieve মানে ছাকনি। আর Seive of Eratosthenes হল এমন একটা ছাকনি যা কতগুলা নাম্বার থেকে প্রাইম নাম্বার গুলা ছেকে বের করে ফেলে। তার পর-ও যারা সিভ জানে না তারা একটু কষ্ট করে সিভটা শিখে ফেলো।কারন আমরা এখন সিভের
খালাত ভাই- মামত ভাই Algorithm শিখব।&lt;/p&gt;

&lt;p&gt;Links for Seive algorithm :&lt;br&gt;
    1.  &lt;a href=&#34;http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes&#34; target=&#34;_blank&#34;&gt;Wikipedia&lt;/a&gt;&lt;br&gt;
    2.  &lt;a href=&#34;http://www.programminglogic.com/the-sieve-of-eratosthenes-implemented-in-c/&#34; target=&#34;_blank&#34;&gt;Programming Logic&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;সিভের জন্য আমার অনেক ফেভারিট ছবিঃ
&lt;img src=&#34;http://upload.wikimedia.org/wikipedia/commons/b/b9/Sieve_of_Eratosthenes_animation.gif&#34; alt=&#34;Seive&#34; data-featherlight=&#34;http://upload.wikimedia.org/wikipedia/commons/b/b9/Sieve_of_Eratosthenes_animation.gif&#34; style=&#34;cursor:zoom-in;&#34;&gt;&lt;/p&gt;

&lt;p&gt;মামাত ভাই Algorithm শিখার আগে সিভ এর কিছু জিনিস দেখা দরকার। সিভ একটা পতাকা (Flag) Array ব্যবহার করে, যাতে যদি 1 থাকে (কোড ভেদে ০ থাকতে পারে। তবে এখানে আমরা ধরে নিচ্ছি যে ১ থাকলে প্রাইম, ০ থাকলে প্রাইম না) তাহলে সংখ্যাটা প্রাইম। একটু সহজ করে বলছি, Array যদি S হয় তাহলে S[1]==0 মানে হল ১ প্রাইম না। আবার S[2]==1 মানে ২ প্রাইম। তারমানে Array S এর ইনডেক্স থেকে আমরা কোন সংখ্যা প্রাইম নাকি প্রাইম না তা বের করতে পারি। এখন সমস্যা টা হল সিভ ব্যবহার করতে চাইলে আমাদের অবশ্যই একটা Array দরকার। কিন্তু C তে ১০০০০০০০০০ এর বড় সাইজের Array কই পাব। তাহলে এখন আমরা করব কি?? প্রাইম কি তাহলে বের করতে পারব না। কেন পারব না, আমরা অনেক স্মার্ট- আমরা সব পারি।&lt;/p&gt;

&lt;p&gt;তো স্মার্ট মানুষেরা প্রাইম বের করার জন্য কিছু পদ্ধতি আবিষ্কার করল&amp;ndash;&lt;br&gt;
        ১। বিট সিভ &amp;ndash; সিভের মামাত ভাই,&lt;br&gt;
        ২। সেগমেন্ট সিভ &amp;ndash;সিভের সুন্দরি খালাত বোন।&lt;br&gt;&lt;/p&gt;

&lt;p&gt;বিট সিভঃ
সিভ করতে গিয়া অলরেডি আমরা একটা আনস্মার্ট কাজ করে ফেলছি। কি কাজ। কাজটা হল &amp;ndash; সিভের জন্য আমরা যে Array টা নিছি তা। আসলে Array টা না। Array-র টাইপ টা। আমরা সবাই অলমোস্ট S Array টা নিছি ইন্টেজার,তাই না? এখন ইন্টেজার নেয়ায় কি প্রবলেম হইছে আস দেখি &amp;ndash;
একটা ইন্টেজার নাম্বার 16(আসলেই কি তাই) টা বিট দ্বারা তৈরী। তো ইন্টেজার ম্যমরি তে ১ এবং ০ কিভাবে রাখে&lt;br&gt;
1 == 0000000000000001&lt;br&gt;
0 == 0000000000000000&lt;br&gt;&lt;/p&gt;

&lt;p&gt;তাহলে স্মার্ট মানুষেরা এতক্ষনে বুঝে ফেলছে আমি কি বলতে চাই। আমরা একটা ইন্টেজার ফ্লাগ হিসেবে ব্যবহার করলে ওই ইন্টেজারের ১৫ টা বিট নষ্ট করতেছি তাই না। কারন আমরা ব্যবহার করতেছি একদম লাস্ট বিটটা। এখন আমরা যদি বাকি ১৫ টা বিট ব্যবহার করতে পারতাম তাহলে আমাদের প্রাইমের রেঞ্জ হইত ১৬*১০০০০০০০০০০ == ১৬০০০০০০০০০০। অনেক বড় তাই না। Long ব্যবহার করে আমরা অলমোস্ট ৩২০০০০০০০০০০ পর্যন্ত প্রাইম ব্যবহার করতে পারি।&lt;/p&gt;

&lt;p&gt;এখন বিট সিভ-এ আমরা করবটা কি? একদম সোজা সিভ-ই চালাব কিন্তু একটু বুদ্ধিমান ভাবে। আগে S Array-এর ইনডেক্স আমরা ব্যবহার করতাম এইবার করব অন্য রকম। কি রকম - S Array-এর ০ ইনডেক্স এর ১ম বিট Represent করবে ১ কে, ০ ইনডেক্স এর ২য় বিট Represent করবে দুই কে। এইভাবে ৯৯৯৯৯৯৯৯৯ ইনডেক্স এর ১৬ম বিট Represent করবে ১৬০০০০০০০০০০ কে। সহজ না।&lt;/p&gt;

&lt;p&gt;এখন এই কাজটা কেমনে করব। (অনেক কিছু-ই আছে আমি বুঝি কিন্তু এখন-ও জানি না যে ঐ কাজ টা কেমনে করব।) তাই প্রথমে-ই কিছু বিট-অপারেশন শিখা জরুরি। বিট And, Or এবং Shift. এই তিনটা পারলে-ই আমাদের হবে।&lt;/p&gt;

&lt;p&gt;কেউ যদি না পার তাহলে এই লিঙ্কটা দেখতে পার আশা করি ভাল ভাবে বুঝে যাবেঃ &lt;a href=&#34;http://binaryrongo.wordpress.com/2013/07/27/bitwise-operator/&#34; target=&#34;_blank&#34;&gt;http://binaryrongo.wordpress.com/2013/07/27/bitwise-operator/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;এখন আমাদের কে বিট সিভ করতে হবে। সিভের কন্সেপ্ট মনে আছে?? কি করতাম আমরা &amp;ndash; ২ থেকে ঘুরা শুরু করতাম দেখতাম ঐটা প্রাইম নাকি মানে চেক করতাম যে S এর ঐ পজিশনে ১ আছে নাকি। থাকলে ঐ সংখার সকল মাল্টিপ্লায়ার গুলার ইনডেক্স ০ করে দিতাম। আর প্রাইম না হলে মানে ইনডেক্স ০ হলে পরের নাম্বারে চলে যেতাম। এখানে-ও তাই করব জাস্ট S এর ইনডেক্স এর বদলে এইবার S এর ইনডেক্স এর বিট ব্যবহার করব।&lt;/p&gt;

&lt;p&gt;এই কাজের জন্য আমরা দুইটা ফাংশন লিখব। int check(long n, long pos) যা আমাদের n ইন্টেজারের pos তম বিটটা চেক করে দিবে যে এইটা ১ নাকি ০। এবং long set(long n, long pos) n এর pos তম বিটটা ১ করে দিবে। বাকিটা ত সিভের মতই।&lt;/p&gt;

&lt;p&gt;এতক্ষন যা বললাম তার একটা ইমপ্লিমেন্টেশনঃ&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#339;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;setBit&lt;/span&gt;( &lt;span style=&#34;color:#339;font-weight:bold&#34;&gt;int&lt;/span&gt; n, &lt;span style=&#34;color:#339;font-weight:bold&#34;&gt;int&lt;/span&gt; position )
{
    n &lt;span style=&#34;color:#333&#34;&gt;=&lt;/span&gt; n &lt;span style=&#34;color:#333&#34;&gt;|&lt;/span&gt; ( &lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#333&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; position );
    &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;return&lt;/span&gt; n;
}


&lt;span style=&#34;color:#339;font-weight:bold&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;checkBit&lt;/span&gt;( &lt;span style=&#34;color:#339;font-weight:bold&#34;&gt;int&lt;/span&gt; n, &lt;span style=&#34;color:#339;font-weight:bold&#34;&gt;int&lt;/span&gt; position )
{
    &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;return&lt;/span&gt; n &lt;span style=&#34;color:#333&#34;&gt;&amp;amp;&lt;/span&gt; ( &lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#333&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; position );
}


&lt;span style=&#34;color:#579&#34;&gt;#define MAX 10001
&lt;/span&gt;&lt;span style=&#34;color:#579&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#339;font-weight:bold&#34;&gt;int&lt;/span&gt; prime[MAX];

&lt;span style=&#34;color:#339;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;primeGenerator&lt;/span&gt;( &lt;span style=&#34;color:#339;font-weight:bold&#34;&gt;int&lt;/span&gt; n )
{
    &lt;span style=&#34;color:#339;font-weight:bold&#34;&gt;int&lt;/span&gt; x &lt;span style=&#34;color:#333&#34;&gt;=&lt;/span&gt; sqrt( n );
    prime[&lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#333&#34;&gt;=&lt;/span&gt; setBit( prime[&lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;0&lt;/span&gt;], &lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;0&lt;/span&gt; );
    prime[&lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#333&#34;&gt;=&lt;/span&gt; setBit( prime[&lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;0&lt;/span&gt;], &lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;1&lt;/span&gt; );
    &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;for&lt;/span&gt;( &lt;span style=&#34;color:#339;font-weight:bold&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#333&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;4&lt;/span&gt;; i &lt;span style=&#34;color:#333&#34;&gt;&amp;lt;=&lt;/span&gt; x; i &lt;span style=&#34;color:#333&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;2&lt;/span&gt; )
        prime[i&lt;span style=&#34;color:#333&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;32&lt;/span&gt;] &lt;span style=&#34;color:#333&#34;&gt;=&lt;/span&gt; setBit( prime[i&lt;span style=&#34;color:#333&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;32&lt;/span&gt;], i&lt;span style=&#34;color:#333&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;32&lt;/span&gt; );
    &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;for&lt;/span&gt;( &lt;span style=&#34;color:#339;font-weight:bold&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#333&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;3&lt;/span&gt;; i &lt;span style=&#34;color:#333&#34;&gt;&amp;lt;=&lt;/span&gt; x; i &lt;span style=&#34;color:#333&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;2&lt;/span&gt; )
    {
        &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;if&lt;/span&gt;( &lt;span style=&#34;color:#333&#34;&gt;!&lt;/span&gt;checkBit( prime[i&lt;span style=&#34;color:#333&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;32&lt;/span&gt;], i&lt;span style=&#34;color:#333&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;32&lt;/span&gt; )
        {
            &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;for&lt;/span&gt;( &lt;span style=&#34;color:#339;font-weight:bold&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#333&#34;&gt;=&lt;/span&gt; i&lt;span style=&#34;color:#333&#34;&gt;+&lt;/span&gt;i; j &lt;span style=&#34;color:#333&#34;&gt;&amp;lt;=&lt;/span&gt; n; j &lt;span style=&#34;color:#333&#34;&gt;+=&lt;/span&gt; i )
                prime[j&lt;span style=&#34;color:#333&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;32&lt;/span&gt;] &lt;span style=&#34;color:#333&#34;&gt;=&lt;/span&gt; setBit( prime[j&lt;span style=&#34;color:#333&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;32&lt;/span&gt;], j&lt;span style=&#34;color:#333&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;32&lt;/span&gt; );
        }
    }

}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;এইটা হল সিভের খালাত ভাই।&lt;/p&gt;

&lt;p&gt;এখন আমার পার্সোনাল ফেভারিট সিভের সুন্দরি খালাত বোন। সেগমেন্ট সিভ। এইটা একটা ইস্পিসাল কাইন্ড অব সিভ। যা একটা নির্দিস্ট রেঞ্জের মধ্যে কাজ করে। ধর A এবং B দুইটা ইন্টিজার ভ্যলু। সাপোজ A=100000 এবং B=255555 যাদের মধ্যে একটা নির্দিস্ট দুরত্ব থাকবে। সেগমেন্ট সিভ এই দুই দুরুত্বের মাঝে কাজ করে এদের মধ্যে যত প্রাইম নাম্বার আছে তা বের করে দিবে।এইটা নিয়া পরে আরেকদিন লেখব নে।&lt;/p&gt;

&lt;p&gt;আপাতত বিট সিভ নিয়া গেজাও। প্রবলেম সলভ কর। কোন সমস্যায় পরলে আমাদের কাছে জানাইতে ভুইল না।&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PC Oscilloscope</title>
      <link>https://sadlil.com/project/pc-oscilloscope/</link>
      <pubDate>Fri, 01 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sadlil.com/project/pc-oscilloscope/</guid>
      <description>&lt;div class=&#34;row&#34;&gt;
&lt;div class=&#34;col-xs-12 col-md-7&#34;&gt;
&lt;b&gt;Built At: &lt;a href=http://mbstu.ac.bd/&gt;Mawlana Bhashani Science and Technology University&lt;/a&gt;&lt;/b&gt;&lt;br&gt;
    &lt;div class=&#34;skills-tech-project&#34;&gt;
      &lt;b&gt;Built With: &lt;/b&gt;
      &lt;span&gt;JavaSE&lt;/span&gt;
      &lt;span&gt;JavaComm&lt;/span&gt;
      &lt;span&gt;C++&lt;/span&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
A computer based Oscilloscope simulation program. Shows the output of an oscillating AC circuit&amp;rsquo;s in computer monitor with an JavaSE based Application. An circuit capture the oscillating power and the interpret it and then send it to the JavaSE application via USB. The Java Desktop application shows the changing graph in the computer monitor.
This is an cost efficient and safe implementation of Real Oscilloscope Device. It also included various feature like saving and printing the output directly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Roles and Responsibilities:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;User Interface Design,&lt;/li&gt;
&lt;li&gt;Software Design,&lt;/li&gt;
&lt;li&gt;Hardware Interfacing.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
  </channel>
</rss>
